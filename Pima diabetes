import numpy as np
import pandas as pd
import seaborn as sns #histogramm library
import math as # math library
%matplotlib inline # matplotlib
import matplotlib.pyplot as plt # matplotlib
from sklearn import tree
from IPython.display import SVG
from IPython.display import display
from graphviz import Source
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics

pima = pd.read_csv('C://Users/sdgro/Desktop/Work/Datasets/Pima/diabetes.csv')
pima.head()

X = pima.loc[:, 'Pregnancies': 'Age'] # на чём обучаемся 
y = pima['Outcome'] # целевой столбец с ответами

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1)
# деление выборки на тренировочкуню и тестовую 
#X_train/y_train тестовая выборка на которых модель обучается
#X_test/y_test выборка которую предсказывает модель
#test_size указывает размер 30% тестовой выборки по которой происходит сравнение относительно выборки для обучения в 70%

clf = DecisionTreeClassifier() # вызов clssifier
clf = clf.fit(X_train, y_train) # обучение модели на train данных
y_pred = clf.predict(X_test) # переменная предсказывающая данные основываясь на X_test данных

print('Accuracy on training set: {:.3f}' .format(clf.score(X_train, y_train))) # out result fit относительно train data
print('Accuracy on test set: {:.3f}' .format(clf.score(X_test, y_test))) # out result fit относительно test samples по ответам

clf = DecisionTreeClassifier(criterion = 'entropy',
                             max_depth = 4,
                             splitter = 'best',
                             random_state = 6,
                             min_samples_leaf = 1) # критерии classifier для дальнейшего model training
clf = clf.fit(X_train, y_train) # очередной process model training

y_pred = clf.predict(X_test) # a variable predict of data основываясь на X_test data
print('Accuracy on training set: {:.3f}' .format(clf.score(X_train, y_train)))
print('Accuracy on test set: {:.3f}' .format(clf.score(X_test, y_test)))

tree.plot_tree(clf, feature_names= list(X_train), # рисовалка дерева лепестков
              class_names = ['negative', 'Positive'], # добавление в лепесток опции показывающей направление движения относительно IG
              filled  = True); # tree color on 
